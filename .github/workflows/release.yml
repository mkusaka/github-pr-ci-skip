name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build extension
        run: pnpm build

      - name: Get version from manifest.json
        id: version
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create release package
        run: |
          # Create a clean directory for packaging
          mkdir -p release-package
          
          # Copy necessary files
          cp manifest.json release-package/
          cp background.js release-package/
          cp content.js release-package/
          cp LICENSE release-package/
          cp README.md release-package/
          
          # Create zip file
          cd release-package
          zip -r ../github-pr-ci-skip-v${{ steps.version.outputs.version }}.zip *
          cd ..
          
          # Also create a source code archive
          zip -r github-pr-ci-skip-source-v${{ steps.version.outputs.version }}.zip . \
            -x "*.git*" \
            -x "*node_modules*" \
            -x "*release-package*" \
            -x "*.zip"

      - name: Generate release notes
        id: release_notes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating notes from beginning"
            NOTES=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/releases/generate-notes \
              -f tag_name="${{ github.ref_name }}" \
              -f target_commitish="${{ github.sha }}" | jq -r '.body')
          else
            echo "Generating notes from ${PREVIOUS_TAG} to ${{ github.ref_name }}"
            NOTES=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/releases/generate-notes \
              -f tag_name="${{ github.ref_name }}" \
              -f target_commitish="${{ github.sha }}" \
              -f previous_tag_name="${PREVIOUS_TAG}" | jq -r '.body')
          fi
          
          # Save notes to file for the release
          echo "${NOTES}" > release_notes.md
          echo "Release notes generated successfully"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes-file release_notes.md \
            github-pr-ci-skip-v${{ steps.version.outputs.version }}.zip \
            github-pr-ci-skip-source-v${{ steps.version.outputs.version }}.zip

      - name: Upload Release Assets Summary
        run: |
          echo "### ðŸ“¦ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Assets:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`github-pr-ci-skip-v${{ steps.version.outputs.version }}.zip\` - Chrome Extension package" >> $GITHUB_STEP_SUMMARY
          echo "- \`github-pr-ci-skip-source-v${{ steps.version.outputs.version }}.zip\` - Source code" >> $GITHUB_STEP_SUMMARY